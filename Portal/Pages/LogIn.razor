@* @page "/login" *@
@inject IAuthenticationService AuthService
@inject NavigationManager NavManager

@* @if (showAuthenticationError)
{
    <div class="alert alert-danger" role="alert">
        @authenticationErrorText
    </div>
} *@

<EditForm Model="model" OnValidSubmit="ExecuteLogin" class="">
    @* <DataAnnotationsValidator />
    <ValidationSummary /> *@

    <div class="form-floating row">
        <div class="col-auto">
            @* <label for="email" class="sr-only">Email</label> *@
            <InputText id="email" class="form-control" @bind-Value="model.Email" placeholder="Email Address" />
        </div>

        <div class="col-auto">
            @* <label for="password" class="sr-only">Password</label> *@
            <InputText type="password" id="password" class="form-control" @bind-Value="model.Password" placeholder="Passwords" />
        </div>

        <div class="col-auto">
            <button type="submit" class="btn btn-success">Log In</button>
        </div>


        <div class="col-auto">
            <button type="button" class="btn btn-primary" @onclick="RegisterUser">Register</button>
        </div>
    </div>
    @if (showAuthenticationError)
    {
        <div class="form-row">
            <div class="text-danger">
                @authenticationErrorText

            </div>
        </div>
    }
</EditForm>



@code {

    private AuthenticationUserModel model = new();

    private bool showAuthenticationError = false;
    private string authenticationErrorText = string.Empty;

    private void RegisterUser()
    {
        NavManager.NavigateTo("/register");
    }


    private async Task ExecuteLogin()
    {
        showAuthenticationError = false;

        try
        {
            // var result = await AuthService.Login(model);
            AuthenticatedUserModel result = await AuthService.Login(model);

            if (result is not null)
            {
                NavManager.NavigateTo("/");
            }
            else
            {
                authenticationErrorText = "There was an error when trying to log in.";
                showAuthenticationError = true;
            }
        }
        catch (Exception ex)
        {
            authenticationErrorText = $"An error occurred: {ex.Message}";
            showAuthenticationError = true;
        }
    }
}
